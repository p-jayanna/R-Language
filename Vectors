//hello world progrm with vectors
a<-c('hello','world')
a
[1] "hello" "world"

//vectors assignment and arithmatic operations
x<-c(10.4, 5.6, 3.1, 6.4, 21.7)  // assign vector x with set of values
x                               //print x
[1] 10.4  5.6  3.1  6.4 21.7

y<-2*x                          // multiply x with 2 and assign to y
y                               //print y
[1] 20.8 11.2  6.2 12.8 43.4


// Aggregession in R
sum(x)                          // sum of vector x
[1] 47.2
prod(x)                         //product of x
[1] 25073.95
//some other basic operation
order(x)                        //ordering of x
[1] 3 2 4 1 5

sort(x)                         //sorting x
[1]  3.1  5.6  6.4 10.4 21.7

b<-1:30                         //sequence generation
[1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30

seq(-2, 2, by=.2) -> s3       //sequence generation with step value
> s3
 [1] -2.0 -1.8 -1.6 -1.4 -1.2 -1.0 -0.8 -0.6 -0.4 -0.2  0.0  0.2  0.4  0.6  0.8  1.0  1.2  1.4  1.6  1.8  2.0
 
 s5 <- rep(x, times=2)        //replication of vectors
 s5
 [1] 10.4  5.6  3.1  6.4 21.7 10.4  5.6  3.1  6.4 21.7
 
 p<-c(1,5,8,9,3,45,6,9,25,14,78,3)        //logical vectors 
> p1<-p>8
> p1
 [1] FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE
 
 
 > c1<-c(1,2,3,4)
> c2<-c(1,2,3,4,5,6,7,8)
> c3<-c1&c2                             //intersecction of vectors
> c3
[1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> c4<-c1|c2                               //union of vectors
> c4
[1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE

> z <- c(1:3,NA);                     //Missing values       
> z
[1]  1  2  3 NA
> ind <- is.na(z)
> ind
[1] FALSE FALSE FALSE  TRUE
> ind <- is.na(z)

0/0                         //not a number
[1] NaN

 labs <- paste(c("X","Y"), 1:10, sep="")           //character vectors and paste() method
> labs
 [1] "X1"  "Y2"  "X3"  "Y4"  "X5"  "Y6"  "X7"  "Y8"  "X9"  "Y10"
 
 > x
[1] 0 1 2 3 4 5
> (x+1)[x>0]->y                //Index vectors
> y
[1] 2 3 4 5 6

 y <- x[-(1:5)]                 //negative index vector
> y
[1] 5

> fruit <- c(5, 10, 1, 20)
> names(fruit) <- c("orange", "banana", "apple", "peach")            // A vector of character strings
> fruit
orange banana  apple  peach 
     5     10      1     20 
> names
function (x)  .Primitive("names")
